#include <iostream>
#include <fstream>
#include <sys/socket.h>
#include <netinet/in.h>
#include <unistd.h>

#define PORT 8080  // C·ªïng server l·∫Øng nghe
#define BUFFER_SIZE 1024  // K√≠ch th∆∞·ªõc buffer

void receiveFile(const std::string& outputFilename) {
    int server_fd, new_socket;
    struct sockaddr_in address;
    socklen_t addrlen = sizeof(address);
    char buffer[BUFFER_SIZE];

    // 1Ô∏è‚É£ T·∫°o socket
    server_fd = socket(AF_INET, SOCK_STREAM, 0);
    if (server_fd == -1) {
        std::cerr << "‚ùå L·ªói t·∫°o socket!" << std::endl;
        return;
    }

    // 2Ô∏è‚É£ Thi·∫øt l·∫≠p ƒë·ªãa ch·ªâ server
    address.sin_family = AF_INET;
    address.sin_addr.s_addr = INADDR_ANY;
    address.sin_port = htons(PORT);

    // 3Ô∏è‚É£ Bind socket v√†o ƒë·ªãa ch·ªâ v√† c·ªïng
    if (bind(server_fd, (struct sockaddr*)&address, sizeof(address)) < 0) {
        std::cerr << "‚ùå L·ªói bind!" << std::endl;
        return;
    }

    // 4Ô∏è‚É£ L·∫Øng nghe k·∫øt n·ªëi
    if (listen(server_fd, 3) < 0) {
        std::cerr << "‚ùå L·ªói listen!" << std::endl;
        return;
    }
    std::cout << "üì° Server ƒëang l·∫Øng nghe tr√™n c·ªïng " << PORT << "..." << std::endl;

    // 5Ô∏è‚É£ Ch·∫•p nh·∫≠n k·∫øt n·ªëi t·ª´ Client
    new_socket = accept(server_fd, (struct sockaddr*)&address, &addrlen);
    if (new_socket < 0) {
        std::cerr << "‚ùå L·ªói accept!" << std::endl;
        return;
    }
    std::cout << "‚úÖ K·∫øt n·ªëi nh·∫≠n file th√†nh c√¥ng!" << std::endl;

    // 6Ô∏è‚É£ Nh·∫≠n d·ªØ li·ªáu v√† ghi v√†o file
    std::ofstream outFile(outputFilename, std::ios::binary);
    if (!outFile) {
        std::cerr << "‚ùå Kh√¥ng th·ªÉ m·ªü file ƒë·ªÉ ghi!" << std::endl;
        return;
    }

    int bytesRead;
    while ((bytesRead = recv(new_socket, buffer, BUFFER_SIZE, 0)) > 0) {
        outFile.write(buffer, bytesRead);
    }

    std::cout << "‚úÖ ƒê√£ nh·∫≠n file v√† l∆∞u v√†o: " << outputFilename << std::endl;

    // 7Ô∏è‚É£ ƒê√≥ng k·∫øt n·ªëi
    close(new_socket);
    close(server_fd);
}

int main() {
    receiveFile("received_ciphertext.txt");
    return 0;
}
